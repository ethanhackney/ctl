#!/bin/bash

# bare minimum needed to work
if [ -z "$CTL_ROOT" ]; then
  echo "run_tests: CTL_ROOT undefined" 2>&1
  exit 1
fi
if [ -z "$CTL_ENV" ]; then
  echo "run_tests: CTL_ENV undefined" 2>&1
  exit 1
fi

# source our environment
source "$CTL_ENV"

# source our bash library
source "$CTL_BASH_LIB"

# get test name from path
#
# args:
#  @path: path
#
# ret:
#  test name
test_name() {
  # return name
  echo "$name"
}

# verbose mode?
v=0

# performance test?
perf_test=0

# silent mode?
silent=

# parse args
while [ $# -ne 0 ]; do
  case "$1" in
    -v|--verbose)
      v=1
      shift
      ;;
    -s|--silent)
      silent='-s'
      shift
      ;;
    -p|--perf)
      perf_test=1
      shift
      ;;
    *)
      arg_bad "$1"
      ;;
  esac
done

# print message if in verbose mode
#
# args:
#  @msg: message
verbose() {
  local msg="$1"

  if [ $v -ne 0 ]; then
    do_or_die echo "$(basename $0): $msg"
  fi
}

# switch to our directory
docdir=$(dirname $0)
verbose "switching to $docdir"
cd "$docdir"

trap "rm -f a.out Makefile" EXIT

verbose 'generating tests...'
# for each test
for t in $CTL_TEST/*.c; do
  file="${t##*/}"
  name="${file%.*}"

  # make sure we match *.c
  ext="${file##*.}"
  if [ "$ext" != 'c' ]; then
    echo "$path is not c source: bad extension" >&2
    exit 1
  fi

  # make sure contents are c
  ft=$(file "$t")
  if [ "$ft" != "$t: C source, ASCII text" ]; then
    echo "$t is not c source: contents not c" >&2
    exit 1
  fi

  # generate test
  verbose "generating test for $name"
  do_or_die "$CTL_MKTEST/$name" "$silent"

  # is this a debugging test or a performance test?
  if [ "$perf_test" -eq 1 ]; then
    verbose 'doing performance test'
    cflags="$CTL_FAST_CFLAGS"
  else
    verbose 'doing debug test'
    cflags="$CTL_TEST_CFLAGS"
  fi

  # generate makefile
  verbose 'generating Makefile'
cat >Makefile <<EOF
main: $t $CTL_LIB/lib.c
$(printf '\t')gcc $cflags \$^
EOF
  # compile test
  verbose "compiling $t"
  do_or_die make >/dev/null

  # run it

  if ! time ./a.out; then
    die "unable to run $t"
  fi

  # remove files
  verbose 'removing files'
  do_or_die rm a.out Makefile
done
