AUTO-GENERATED!!! DO NOT MODIFY
=========================
ARR_DEF(link, type, name)
=========================
info:
 dynamic array template

args:
 @link: linkage of generated functions
 @type: type of array elements
 @name: name of generated struct and prefix of all function names
====================================================
public  ${name}_init(struct ${name} *ap, size_t cap)
====================================================
info:
   initialize ${name}

  args:
   @ap:   pointer to ${name}
   @cap:  initial capacity or zero for default

  ret:
   @success: 0
   @failure: -1 and errno set
===============================================================
public  ${name}_free(struct ${name} *ap, void (*dtor)(${type}))
===============================================================
info:
   free ${name}

  args:
   @ap:   pointer to ${name}
   @dtor: optional destructor
===================================================
public  ${name}_push(struct ${name} *ap, ${type} v)
===================================================
info:
   add value to end of ${name}

  args:
   @ap: pointer to ${name}
   @v:  value to add

  ret:
   @success: 0
   @failure: -1 and errno set
===========================================================================
public  ${name}_pop(struct ${name} *ap, ${type} *vp, void (*dtor)(${type}))
===========================================================================
info:
   remove element from end of ${name}

  args:
   @ap:   pointer to ${name}
   @vp:   pointer to ${type} (pass NULL if you do not want it)
   @dtor: optional destructor

  ret:
   @success: 0
   @failure: -1 and errno set
===============================================================================
public  ${name}_sort(struct ${name} *ap, int (*fn)(const void *, const void *))
===============================================================================
info:
   sort ${name}

  args:
   @ap: pointer to ${name}
   @fn: comparison function
    ret:
     < 0 if a < b
     = 0 if a = b
     > 0 if a > b
==============================================================
public  ${name}_add(struct ${name} *ap, size_t idx, ${type} v)
==============================================================
info:
   add value to ${name}

  args:
   @ap:  pointer to ${name}
   @idx: where to put v
   @v:   value to add

  ret:
   @success: 0
   @failure: -1 and errno set
======================================================================================
public  ${name}_rm(struct ${name} *ap, size_t idx, ${type} *vp, void (*dtor)(${type}))
======================================================================================
info:
   remove value from ${name}

  args:
   @ap:    pointer to ${name}
   @idx:  value to remove
   @vp:   pointer to ${type} (pass NULL if you do not want it)
   @dtor: optional destructor

  ret:
   @success: 0
   @failure: -1 and errno set
==============================================================================
public  ${name}_addv(struct ${name} *ap, size_t idx, ${type} *arr, size_t len)
==============================================================================
info:
   add multiple values to ${name}

  args:
   @ap:  pointer to ${name}
   @idx: where to add
   @arr: array of ${type}
   @len: length of array

  ret:
   @success: 0
   @failure: -1 and errno set
====================================================================================================
public  ${name}_rmv(struct ${name} *ap, size_t idx, ${type} *arr, size_t len, void (*dtor)(${type}))
====================================================================================================
info:
   remove multiple values to ${name}

  args:
   @ap:  pointer to ${name}
   @idx: where to add
   @len: length of array
   @dtor: optional destructor

  ret:
   @success: 0
   @failure: -1 and errno set
===================================================================================================
public  ${name}_find(const struct ${name} *ap, ${type} v, int (*cmp)(const ${type}, const ${type}))
===================================================================================================
info:
   linear search on ${name}

  args:
   @ap: pointer to ${name}
   @v:  value to search for
   @cmp:
    ret:
     < 0 if a < b
     = 0 if a = b
     > 0 if a > b

  ret:
   @success: index of element
   @failure: one past last valid element
================================================================================================
public  ${name}_bin_add(struct ${name} *ap, ${type} v, int (*cmp)(const ${type}, const ${type}))
================================================================================================
info:
   binary insertion on ${name}

  args:
   @ap: pointer to ${name}
   @v:  value to add
   @cmp:
    ret:
     < 0 if a < b
     = 0 if a = b
     > 0 if a > b

  ret:
   @success: 0
   @failure: -1
=======================================================================================================
public  ${name}_bin_find(const struct ${name} *ap, ${type} v, int (*cmp)(const ${type}, const ${type}))
=======================================================================================================
info:
   clear ${name}

  args:
   @ap: pointer to ${name}
  binary search on ${name}:

  args:
   @ap: pointer to ${name}
   @v:  value to search for
   @cmp:
    ret:
     < 0 if a < b
     = 0 if a = b
     > 0 if a > b

  ret:
   @success: index of element
   @failure: one past last valid element
======================================================================================================================
public  ${name}_bin_rm(struct ${name} *ap, ${type} v, void (*dtor)(${type}), int (*cmp)(const ${type}, const ${type}))
======================================================================================================================
info:
   binary removal on ${name}

  args:
   @ap:   pointer to ${name}
   @v:    value to remove
   @dtor: optional destructor
   @cmp:
    ret:
     < 0 if a < b
     = 0 if a = b
     > 0 if a > b

  ret:
   @success: 0
   @failure: -1
