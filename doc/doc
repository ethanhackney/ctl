#!/bin/bash

# bare minimum needed to work
if [ -z "$CTL_ROOT" ]; then
  echo "$(basename $0): CTL_ROOT undefined" 2>&1
  exit 1
fi
if [ -z "$CTL_ENV" ]; then
  echo "$(basename $0): CTL_ENV undefined" 2>&1
  exit 1
fi

# grab environment
source "$CTL_ENV"

# source our bash library
source "$CTL_BASH_LIB"

# verbose mode?
v=0

# parse args
while [ $# -ne 0 ]; do
  case "$1" in
    -v|--verbose)
      v=1
      shift
      ;;
    *)
      arg_bad "$1" "$0" 
      ;;
  esac
done

# print message if in verbose mode
#
# args:
#  @msg: message
verbose() {
  local msg="$1"

  if [ $v != 0 ]; then
    do_or_die echo "$(basename $0): $msg"
  fi
}

# switch to our directory
docdir=$(dirname $0)
verbose "switching to $docdir"
cd "$docdir"

verbose 'generating docs...'

# templates
tmps=(
  'arr' # dynamic array
)

for ((i = 0; i < ${#tmps[@]}; i++)); do
  verbose "tmps[$i] = \"${tmps[i]}\""
done

# setup arch directory if needed
if ! [ -d "$CTL_ARCH" ]; then
  verbose "\"$CTL_ARCH\" not directory"
  if [ -e "$CTL_ARCH" ]; then
    verbose "\"$CTL_ARCH\" something else, removing it"
    do_or_die rm "$CTL_ARCH"
  fi
  # create arch directory
  verbose "creating \"$CTL_ARCH\""
  do_or_die mkdir "$CTL_ARCH"
fi

# move project structure files to arch if they are not already there
verbose "copying \"$CTL_PIC\" to \"$CTL_ARCH/pic\""
do_or_die cp "$CTL_PIC" "$CTL_ARCH/pic"
verbose "copying \"$CTL_TREE\" to \"$CTL_ARCH/tree\""
do_or_die cp "$CTL_TREE" "$CTL_ARCH/tree"

# generate env doc
verbose "generating env doc..."
do_or_die echo "$CTL_AUTO_GEN_MSG" >"$CTL_ARCH/env"
do_or_die ./env.awk "$CTL_ENV" >>"$CTL_ARCH/env"

verbose 'generating doc for each template...'
# for each template
for ((i = 0; i < ${#tmps[@]}; i++)); do
  tmp="${tmps[i]}"         # template name
  hdr="hdr/$tmp"           # template doc header
  tmpdir="$CTL_ARCH/$tmp"  # template doc directory
  tmpsrc="$CTL_TMP/$tmp.h" # template source
  func="CTL_${tmp^^}_DEF"  # template function name
  priv="$tmpdir/priv"      # private member doc file
  pub="$tmpdir/pub"        # public member doc file

  verbose "tmps[$i].name = \"$tmp\""
  verbose "tmps[$i].func = \"$func\""
  verbose "tmps[$i].priv = \"$priv\""
  verbose "tmps[$i].hdr  = \"$hdr\""
  verbose "tmps[$i].dir  = \"$tmpdir\""
  verbose "tmps[$i].src  = \"$tmpsrc\""
  verbose "tmps[$i].pub  = \"$pub\""

  # fail if no header
  if ! [ -e "$hdr" ]; then
    die "\"$tmp\" does not have a header yet" "$CTL_EEXIST"
  fi

  # if doc directory for template not already there
  if ! [ -d "$tmpdir" ]; then
    verbose "\"$tmpdir\" not directory"
    if [ -e "$tmpdir" ]; then
      verbose "\"$tmpdir\" something else, removing it"
      do_or_die rm "$tmpdir"
    fi
    verbose "creating \"$tmpdir\""
    do_or_die mkdir "$tmpdir"
  fi

  # write header to private and public member files
  verbose "copying \"$hdr\" to \"$priv\""
  do_or_die echo "$CTL_AUTO_GEN_MSG" >"$priv"
  do_or_die cat "$hdr" >>"$priv"

  verbose "copying \"$hdr\" to \"$pub\""
  do_or_die echo "AUTO-GENERATED!!! DO NOT MODIFY" >"$pub"
  do_or_die cat "$hdr" >>"$pub"

  # generate template doc
  verbose "running \"./tmp.awk\" on \"$tmpsrc\" with FUNC=\"$func\", PUB=\"$pub\", PRIV=\"$priv\""
  do_or_die ./tmp.awk \
    -v FUNC="$func" \
    -v PUB="$pub"   \
    -v PRIV="$priv" \
    "$tmpsrc"

  verbose "\"$tmp\" doc created"
done
